import{r as n,o as a,c as r,a as e,b as s,F as i,e as o,d as l}from"./app.b56f40a7.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const c={},h=e("h1",{id:"game-boy-asm-style-guide",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#game-boy-asm-style-guide","aria-hidden":"true"},"#"),o(" Game Boy ASM style guide")],-1),_=o("Written by "),u={href:"https://github.com/ISSOtm/",target:"_blank",rel:"noopener noreferrer"},b=o("ISSOtm"),p=e("hr",null,null,-1),g=e("p",null,"This style guide aims to formalize a style that most Game Boy ASM programmers agree on, and provide a good baseline for new programmers just starting in this field. (If that's you, welcome! \u{1F604})",-1),f=o("To quote the "),m={href:"https://github.com/torvalds/linux/blob/master/Documentation/process/coding-style.rst",target:"_blank",rel:"noopener noreferrer"},y=o("Linux kernel style guide"),v=o(":"),k=e("blockquote",null,[e("p",null,[o("Coding style is very personal, and I won't "),e("strong",null,"force"),o(" my views on anybody, but this is what goes for anything that I have to be able to maintain, and I'd prefer it for most other things too. Please at least consider the points made here.")])],-1),w=e("p",null,"Many people follow alternate style guides, and that's fine; but if you're starting to code in ASM, a clean style goes a long way to keep your code organized. Again: you don't have to do everything listed here, but please at least consider the reasons behind each bullet point.",-1),A=o("Oh, by the way, you're free to "),M={href:"https://github.com/gbdev/gbdev.github.io",target:"_blank",rel:"noopener noreferrer"},R=o("contribute to this document"),S=o(" and/or "),O={href:"https://gbdev.io/chat",target:"_blank",rel:"noopener noreferrer"},B=o("chat with us about it"),x=o("!"),N=e("h2",{id:"naming",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#naming","aria-hidden":"true"},"#"),o(" Naming")],-1),I={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#SYMBOLS",target:"_blank",rel:"noopener noreferrer"},C=o("RGBASM accepts a lot of symbol names"),L=o(":"),E=e("blockquote",null,[e("p",null,"Symbol names can contain letters, numbers, underscores \u2018_\u2019, hashes \u2018#\u2019 and at signs \u2018@\u2019. However, they must begin with either a letter, or an underscore.")],-1),T=e("p",null,"However, naming conventions make code easier to read, since they help convey the different semantics between each symbol's name.",-1),q=l("<li><p>Labels use PascalCase: <code>DrawNPCs</code>, <code>GetOffsetFromCamera</code>.</p></li><li><p>Labels in RAM (VRAM, SRAM, WRAM, HRAM; you shouldn&#39;t be using Echo RAM or OAM) use the same convention but are prefixed with the initial of the RAM they&#39;re in, in lowercase: <code>wCameraOffsetBuffer</code>, <code>hVBlankFlag</code>, <code>vTilesetTiles</code>, <code>sSaveFileChecksum</code>. <em>Rationale: to know in which memory type the label is; this is important because VRAM and SRAM have special access precautions and HRAM can (should (must)) be accessed using the <code>ldh</code> instruction.</em></p></li><li><p>Local labels use camelCase, regardless of memory type: <code>.waitVRAM</code>, <code>wPlayer.xCoord</code>.</p></li><li><p>Macro names use snake_case: <code>wait_vram</code>, <code>end_struct</code>.</p></li>",4),G=e("p",null,[o("Constants use CAPS_SNAKE: "),e("code",null,"NB_NPCS"),o(", "),e("code",null,"OVERWORLD_STATE_LOAD_MAP"),o(".")],-1),D=o("Exception: constants that are used like labels should follow the label naming conventions. For example, see "),j={href:"https://github.com/gbdev/hardware.inc/blob/master/hardware.inc",target:"_blank",rel:"noopener noreferrer"},P=o("hardware.inc"),F=o("'s "),H=e("code",null,"rXXX",-1),V=o(" constants."),z=e("h2",{id:"best-practices",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#best-practices","aria-hidden":"true"},"#"),o(" Best practices")],-1),K=e("p",null,"Avoid hardcoding things. This means:",-1),U=e("li",null,[e("p",null,[o("No magic numbers. "),e("code",null,"ld a, CURSOR_SPEED"),o(" is much more obvious than "),e("code",null,"ld a, 5"),o(". In addition, if you ever change your mind and decide to change the cursor speed, you will only need to do so in one location ("),e("code",null,"CURSOR_SPEED equ 5"),o(" \u2192 "),e("code",null,"CURSOR_SPEED equ 4"),o(") instead of at every location you're using it, potentially missing some.")])],-1),W=o("Unless "),X=e("strong",null,"absolutely necessary",-1),Y=o(", don't "),$={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#BANK",target:"_blank",rel:"noopener noreferrer"},Q=o("force a "),J=e("code",null,"SECTION",-1),Z=o("'s bank"),ee=o(" or address. This puts the burden of managing ROM space on you, instead of offloading the job to RGBLINK, which performs very well in typical cases. Exceptions:"),oe=o("Your ROM's entry point "),te={href:"https://gbdev.io/pandocs/#_0100-0103-entry-point",target:"_blank",rel:"noopener noreferrer"},se=o("must be at $0100"),ne=o(", however the jump does not have to be to $0150 ("),ae={href:"https://github.com/GreenAndEievui/vuibui-engine/blob/206fd814e67da2cebbeca7d011a5537fef22a29c/src/main.asm#L6",target:"_blank",rel:"noopener noreferrer"},re=o("example"),ie=o(")."),le={href:"https://gbdev.io/pandocs/#jump-vectors-in-first-rom-bank",target:"_blank",rel:"noopener noreferrer"},de=e("code",null,"rst",-1),ce=o(" vectors and interrupt handlers"),he=o(" obviously need to be at the corresponding locations."),_e={href:"https://github.com/gbdev/rgbds/issues/244",target:"_blank",rel:"noopener noreferrer"},ue=o("RGBDS presently does not allow forcing different sections to be in the same bank"),be=o(". If you need to do so, the ideal fix is to merge the two sections together (either by moving the code, or using "),pe={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#Section_Fragments",target:"_blank",rel:"noopener noreferrer"},ge=e("code",null,"SECTION FRAGMENT",-1),fe=o("), but if that option is unavailable, the only alternative is to explicitly declare them with the same "),me=e("code",null,"BANK[]",-1),ye=o(" attribute. (In which case it's advisable to add an "),ve=e("code",null,'assert BANK("Section A") == BANK("Section B")',-1),ke=o(" line.)"),we=o("If you need some alignment, prefer "),Ae={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#ALIGN",target:"_blank",rel:"noopener noreferrer"},Me=e("code",null,"ALIGN[]",-1),Re=o(" to forcing the address. A typical example is "),Se={href:"https://gbdev.io/pandocs/#lcd-oam-dma-transfers",target:"_blank",rel:"noopener noreferrer"},Oe=o("OAM DMA"),Be=o("; for that, prefer "),xe=e("code",null,'SECTION "Shadow OAM", WRAM0,ALIGN[8]',-1),Ne=o(" over e.g. "),Ie=e("code",null,'SECTION "Shadow OAM", WRAM0[$C000]',-1),Ce=o("."),Le=o("Allocate space for your variables using "),Ee={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#SYMBOLS",target:"_blank",rel:"noopener noreferrer"},Te=o("labels"),qe=o(" + "),Ge={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#Declaring_variables_in_a_RAM_section",target:"_blank",rel:"noopener noreferrer"},De=e("code",null,"ds",-1),je=o(" & co"),Pe=o(" instead of "),Fe={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#EQU",target:"_blank",rel:"noopener noreferrer"},He=e("code",null,"equ",-1),Ve=o(". This has several benefits:"),ze=e("li",null,"Removing, adding, or changing the size of a variable that isn't the last one doesn't require updating every variable after it.",-1),Ke=e("li",null,[o("The size of each variable is obvious ("),e("code",null,"ds 4"),o(") instead of having to be calculated from the addresses.")],-1),Ue=e("li",null,[e("code",null,"equ"),o(" allocation is equivalent to hardcoding section addresses (see above), whereas labels are placed automatically by RGBLINK.")],-1),We=o("Labels support "),Xe={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#Other_functions",target:"_blank",rel:"noopener noreferrer"},Ye=e("code",null,"BANK()",-1),$e=o(" and many cool other features!"),Qe=o("Labels are output in "),Je={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgblink.1#m",target:"_blank",rel:"noopener noreferrer"},Ze=e("code",null,"map",-1),eo=o(" and "),oo=e("code",null,"sym",-1),to=o(" files."),so=e("li",null,[e("p",null,"If a file gets too big, you should split it. Files too large are harder to read and navigate. However, the splitting should stay coherent and consistent; having to jump around files constantly is equally as hard to read and navigate.")],-1),no={href:"https://gbdev.io/pandocs/#no-mbc",target:"_blank",rel:"noopener noreferrer"},ao=o("Unless you're making a 32k ROM"),ro=o(", put things in "),io={href:"https://rgbds.gbdev.io/docs/v0.4.2/rgbasm.5#ROMX",target:"_blank",rel:"noopener noreferrer"},lo=e("code",null,"ROMX",-1),co=o(" by default. "),ho=e("code",null,"ROM0",-1),_o=o(" space is precious, and can deplete quickly; and when you run out, it's difficult to move things to ROMX."),uo=o("However, if you have code in ROM bank A refer to code or data in ROM bank B, then either should probably be moved to ROM0, or both be placed in the same bank (options for that are mentioned further above). "),bo={href:"https://github.com/pret/pokecrystal/blob/35219230960f0dc85c0cb6a5723877b247609e46/macros/rst.asm#L1-L5",target:"_blank",rel:"noopener noreferrer"},po=e("code",null,"farcall",-1),go=o(" is a good way to make your code really "),fo={href:"https://en.wikipedia.org/wiki/Spaghetti_code",target:"_blank",rel:"noopener noreferrer"},mo=o("spaghetti"),yo=o("."),vo=o("Don't clear RAM at init! Good debugging emulators will warn you when you're reading uninitialized RAM ("),ko={href:"https://bgb.bircd.org",target:"_blank",rel:"noopener noreferrer"},wo=o("BGB"),Ao=o(" has one in the option's Exceptions tab, for example), which will let you know that you forgot to initialize a variable. Clearing RAM does not fix most of these bugs, but silences the helpful warnings."),Mo=e("p",null,"Also, a lot of the time, variables need to get initialized to values other than 0, so clearing RAM is actually counter-productive in these cases.",-1),Ro=e("h2",{id:"recommendations",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#recommendations","aria-hidden":"true"},"#"),o(" Recommendations")],-1),So=e("p",null,`The difference between these and the "best practices" above is that these are more subjective, but they're still worth talking about here.`,-1),Oo=o('Historically, RGBDS has required label definitions to begin at "column 1" (i.e. no whitespace before them on their line). However, later versions (with full support added in 0.5.0) allow '),Bo={href:"https://github.com/pinobatch/libbet/blob/cabe48bc4042338b9975cb32c2dbd0ee6640f31e/src/main.z80#L206-L231",target:"_blank",rel:"noopener noreferrer"},xo=o("indenting labels"),No=o(", for example to make loops stand out like in higher-level languages. However, "),Io={href:"https://github.com/BlitterObjectBob/DeadCScroll/blob/9834372eb0d56e8b9a8cdcaae4b8aecb6d402266/DeadCScroll.asm#L410-L422",target:"_blank",rel:"noopener noreferrer"},Co=o("a lot of people don't do this"),Lo=o(", so it's up to you."),Eo=e("li",null,[e("p",null,"Compressing data is useful for several reasons; however, it's not necessary in a lot of cases nowadays, so you may want to only look at it after more high-priority aspects.")],-1),To=e("li",null,[e("p",null,"Avoid abusing macros. Macros tend to make code opaque and hard to read for people trying to help you, in addition to having side effects and sometimes leading to very inefficient code.")],-1),qo=e("li",null,[e("p",null,"Never let the hardware draw a corrupted frame even if it's just one frame. If it's noticeable by squinting a bit, it must go.")],-1),Go={href:"https://www.gnu.org/software/make/manual/html_node/",target:"_blank",rel:"noopener noreferrer"},Do=o("Makefiles are bae"),jo=o("; they speed up build time by not re-processing what hasn't changed, and they can automate a lot of tedium. Writing a good Makefile can be quite daunting, but "),Po={href:"https://github.com/ISSOtm/gb-boilerplate",target:"_blank",rel:"noopener noreferrer"},Fo=o("gb-boilerplate"),Ho=o(" and "),Vo={href:"https://github.com/ISSOtm/gb-starter-kit",target:"_blank",rel:"noopener noreferrer"},zo=o("gb-starter-kit"),Ko=o(" can help you get started faster.");function Uo(Wo,Xo){const t=n("ExternalLinkIcon");return a(),r(i,null,[h,e("p",null,[_,e("a",u,[b,s(t)])]),p,g,e("p",null,[f,e("a",m,[y,s(t)]),v]),k,w,e("p",null,[A,e("a",M,[R,s(t)]),S,e("a",O,[B,s(t)]),x]),N,e("p",null,[e("a",I,[C,s(t)]),L]),E,T,e("ul",null,[q,e("li",null,[G,e("p",null,[D,e("a",j,[P,s(t)]),F,H,V])])]),z,e("ul",null,[e("li",null,[K,e("ul",null,[U,e("li",null,[e("p",null,[W,X,Y,e("a",$,[Q,J,Z,s(t)]),ee]),e("ul",null,[e("li",null,[oe,e("a",te,[se,s(t)]),ne,e("a",ae,[re,s(t)]),ie]),e("li",null,[e("a",le,[de,ce,s(t)]),he]),e("li",null,[e("a",_e,[ue,s(t)]),be,e("a",pe,[ge,s(t)]),fe,me,ye,ve,ke])]),e("p",null,[we,e("a",Ae,[Me,s(t)]),Re,e("a",Se,[Oe,s(t)]),Be,xe,Ne,Ie,Ce])])])]),e("li",null,[e("p",null,[Le,e("a",Ee,[Te,s(t)]),qe,e("a",Ge,[De,je,s(t)]),Pe,e("a",Fe,[He,s(t)]),Ve]),e("ul",null,[ze,Ke,Ue,e("li",null,[We,e("a",Xe,[Ye,s(t)]),$e]),e("li",null,[Qe,e("a",Je,[Ze,eo,oo,s(t)]),to])])]),so,e("li",null,[e("p",null,[e("a",no,[ao,s(t)]),ro,e("a",io,[lo,s(t)]),co,ho,_o]),e("p",null,[uo,e("a",bo,[po,s(t)]),go,e("a",fo,[mo,s(t)]),yo])]),e("li",null,[e("p",null,[vo,e("a",ko,[wo,s(t)]),Ao]),Mo])]),Ro,So,e("ul",null,[e("li",null,[e("p",null,[Oo,e("a",Bo,[xo,s(t)]),No,e("a",Io,[Co,s(t)]),Lo])]),Eo,To,qo,e("li",null,[e("p",null,[e("a",Go,[Do,s(t)]),jo,e("a",Po,[Fo,s(t)]),Ho,e("a",Vo,[zo,s(t)]),Ko])])])],64)}var Qo=d(c,[["render",Uo]]);export{Qo as default};
